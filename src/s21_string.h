#ifndef S21_STRING
#define S21_STRING

#if defined(__linux__)
#define N 134
#elif defined(__APPLE_) || defined(__MACH__)
#define N 107
#endif

#ifndef NULL
#define NULL ((void *)0)
#endif
#ifndef S21_NULL
#define S21_NULL ((void *)0)
#endif

typedef unsigned long s21_size_t;

/* | Выполняет поиск первого вхождения символа c (беззнаковый тип) в первых n
 * байтах строки, на которую указывает аргумент str, и возвращает указатель на
 * найденный символ. Если символ не найден, возвращает NULL. | */
void *s21_memchr(const void *str, int c, s21_size_t n);

/* | Сравнивает первые n байтов str1 и str2. Функция не проверяет, есть ли
 * символ '\0' в переданных строках, она всегда сравнивает n байтов. | */
int s21_memcmp(const void *str1, const void *str2, s21_size_t n);

/* | Копирует n символов из src в dest. Функция не проверяет, есть ли символ
 * '\0' в src, она всегда копирует количество байтов, указанное в n. | */
void *s21_memcpy(void *dest, const void *src, s21_size_t n);

/* | Заполняет n байт памяти по указателю str значениями c. | */
void *s21_memset(void *str, int c, s21_size_t n);

/* | Добавляет строку, на которую указывает src, в конец строки, на которую
 * указывает dest, длиной до n символов. Плюс символ '\0' в конце. | */
char *s21_strncat(char *dest, const char *src, s21_size_t n);

/* | Выполняет поиск первого вхождения символа c (беззнаковый тип) в строке, на
 * которую указывает аргумент str. Возвращает указатель на первое вхождение
 * символа в строке. Завершающий нулевой символ считается частью строки. Таким
 * образом, он также может быть найден для получения указателя на конец строки.
 * | */
char *s21_strchr(const char *str, int c);

/* | Сравнивает не более первых n байтов str1 и str2. Проверяет на конец строки
 * и останавливается, встретив его. | */
int s21_strncmp(const char *str1, const char *str2, s21_size_t n);

/* | Копирует до n символов из строки, на которую указывает src, в dest. Если
 * конец строки src достигнут прежде, чем были скопированы n символов, в конец
 * строки dest добавляется нуль-символ и процесс считается завершённым. Если же
 * строка назначения окажется меньше n, тогда скопируются символы, которые
 * поместятся в dest, учитывая то, что нужно оставить одно место под символ
 * конца строки. | */
char *s21_strncpy(char *dest, const char *src, s21_size_t n);

/* | Вычисляет длину начального сегмента str1, который полностью состоит из
 * символов, не входящих в str2. | */
/* В переводе на русский: Функция выполняет поиск первого вхождения в строку
 * str1 любого из символов строки str2, и возвращает количество символов до
 * найденного первого вхождения. Поиск учитывает и завершающий нуль-символ,
 * поэтому если функция возвращает длину строки str1, это значит, что ни один из
 * символов строки str2 не входит в состав str1. */
s21_size_t s21_strcspn(const char *str1, const char *str2);

/* | Выполняет поиск во внутреннем массиве номера ошибки errnum и возвращает
 * указатель на строку с сообщением об ошибке. Нужно объявить макросы,
 * содержащие массивы сообщений об ошибке для операционных систем mac и linux.
 * Описания ошибок есть в оригинальной библиотеке. Проверка текущей ОС
 * осуществляется с помощью директив.| */
char *s21_strerror(int errnum);

/* | Вычисляет длину строки str, не включая завершающий нулевой символ. | */
s21_size_t s21_strlen(const char *str);

/* | Находит первый символ в строке str1, который соответствует любому символу,
 * указанному в str2. Возвращает указатель на первое вхождение найденного
 * символа или NULL, если нет ни одного совпадения. | */
char *s21_strpbrk(const char *str1, const char *str2);

/* | Выполняет поиск последнего вхождения символа c (беззнаковый тип) в строке,
 * на которую указывает аргумент str. Возвращает указатель на последнее
 * вхождение. Завершающий нулевой символ считается частью строки. Таким образом,
 * он также может быть найден для получения указателя на конец строки. | */
char *s21_strrchr(const char *str, int c);

/* | Находит первое вхождение всей строки needle (не включая нулевой символ),
 * которая появляется в строке haystack. Возвращает указатель на первое
 * вхождение строки needle в строку haystack, или NULL, если совпадения нет.| */
char *s21_strstr(const char *haystack, const char *needle);

/* | Разбивает строку str на ряд токенов, разделенных delim. | */
char *s21_strtok(char *str, const char *delim);

/* | Отправляет форматированный вывод в строку, на которую указывает str. | */
int s21_sprintf(char *str, const char *format, ...);

/* | Возвращает копию строки (str), преобразованной в верхний регистр. В случае
 * какой-либо ошибки следует вернуть значение NULL | */
void *s21_to_upper(const char *str);

/* | Возвращает копию строки (str), преобразованной в нижний регистр. В случае
 * какой-либо ошибки следует вернуть значение NULL | */
void *s21_to_lower(const char *str);

/* | Возвращает новую строку, в которой указанная строка (str) вставлена в
 * указанную позицию (start_index) в данной строке (src). В случае какой-либо
 * ошибки следует вернуть значение NULL | */
void *s21_insert(const char *src, const char *str, s21_size_t start_index);

/* | Возвращает новую строку, в которой удаляются все начальные и конечные
 * вхождения набора заданных символов (trim_chars) из данной строки (src). В
 * случае какой-либо ошибки следует вернуть значение NULL | */
void *s21_trim(const char *src, const char *trim_chars);

#endif